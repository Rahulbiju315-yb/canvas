#BlueJ class context
comment0.params=img
comment0.target=java.awt.image.BufferedImage\ copyImage(java.awt.Image)
comment0.text=Returns\ a\ copy\ of\ BufferedImage\ created\ from\ an\ image\ object\r\n
comment1.params=im
comment1.target=void\ setImage(java.awt.image.BufferedImage)
comment1.text=\r\n\ Sets\ the\ image\ for\ the\ easel\r\n
comment10.params=x
comment10.target=int\ iX(float)
comment10.text=\r\n\ Converts\ the\ continuous\ X\ cordinate\ to\ discrete\ X\ Cordinate\ \r\n
comment11.params=y
comment11.target=int\ iY(float)
comment11.text=\r\n\ Converts\ the\ continuous\ Y\ cordinate\ to\ discrete\ Y\ Cordinate\ \r\n
comment12.params=x
comment12.target=int\ cx(float)
comment13.params=y
comment13.target=int\ cy(float)
comment14.params=x3\ y3\ phi
comment14.target=float[]\ rotate(float,\ float,\ double)
comment14.text=\r\n\ Rotates\ the\ given\ point\ about\ the\ origin\r\n
comment15.params=x
comment15.target=float\ fx(int)
comment15.text=\r\n\ Converts\ discrete\ X\ cordinates\ to\ continuous\ X\ cordinates\r\n
comment16.params=y
comment16.target=float\ fy(int)
comment16.text=\r\n\ Converts\ discrete\ Y\ cordinates\ to\ continuous\ Y\ cordinates\r\n
comment17.params=g\ x\ y
comment17.target=void\ drawTriangle(java.awt.Graphics,\ float[],\ float[])
comment17.text=\r\n\ \ Draws\ the\ turtle\ for\ TurtleTool\r\n
comment18.params=x3\ y3\ oX\ oY\ phi
comment18.target=float[]\ rotate(float,\ float,\ float,\ float,\ double)
comment18.text=\r\n\ \ Rotates\ the\ given\ point\ \ x3\ ,\ \ y3\ about\ \ oX\ ,\ \ oY\r\n
comment19.params=width\ height
comment19.target=Easel(int,\ int)
comment19.text=\r\n\ Constructor\ \r\n\ width\ \ ->\ Width\ \ of\ the\ bufferedimage(Drawing\ Area)\r\n\ height\ ->\ Height\ of\ the\ bufferedimage(Drawing\ Area)\r\n
comment2.params=img
comment2.target=void\ saveToUndoStack(java.awt.Image)
comment2.text=\r\n\ Saves\ the\ \ img\ to\ the\ undo\ stack.\r\n
comment20.params=
comment20.target=void\ undo()
comment20.text=\r\n\ \ Undo\ the\ last\ painting\ by\ poping\ the\ undoStack,then\ saves\ it\ to\ the\ redo\ stack.\ \r\n
comment21.params=
comment21.target=void\ redo()
comment21.text=\r\n\ \ Redo\ the\ last\ painting\ by\ poping\ the\ redoStack,then\ saves\ it\ to\ the\ undo\ stack.\ \r\n
comment22.params=im
comment22.target=void\ drawImage(java.awt.image.BufferedImage)
comment22.text=\r\n\ \ Draws\ the\ given\ bufferedimage\ and\ on\ the\ drawing\ area\ \r\n
comment23.params=x\ y\ h\ w\ nx\ ny
comment23.target=void\ drawImage(int,\ int,\ int,\ int,\ int,\ int)
comment24.params=h\ w
comment24.target=void\ drawImage(int,\ int)
comment25.params=
comment25.target=java.awt.image.BufferedImage\ getImage()
comment25.text=\r\n\ Returns\ the\ drawing\ area\ ie,\ BufferedImage\ instance\ image\r\n
comment26.params=c
comment26.target=void\ setColor(java.awt.Color)
comment26.text=\r\n\ \ Sets\ the\ color\ of\ the\ graphics.\r\n\ \ Sets\ the\ color\ variable\ of\ ColorModel\ to\ parameter\ c\r\n
comment27.params=x1\ y1\ x2\ y2
comment27.target=void\ drawLine(int,\ int,\ int,\ int)
comment27.text=\r\n\ \ Draws\ a\ line\ from\ x1,y1\ to\ x2,y2\r\n
comment28.params=
comment28.target=void\ drawFractal()
comment28.text=\r\n\ \ Draws\ a\ fractal\ using\ frc.fractals()\ method\r\n
comment29.params=x1\ y1\ x2\ y2
comment29.target=void\ drawCaligLine(int,\ int,\ int,\ int)
comment29.text=\r\n\ \ Draws\ a\ caligraphic\ line\r\n
comment3.params=img
comment3.target=void\ saveToRedoStack(java.awt.Image)
comment3.text=\r\n\ Saves\ the\ img\ to\ the\ redo\ stack.\r\n
comment30.params=x1\ y1\ x2\ y2
comment30.target=void\ drawSpikeLine(int,\ int,\ int,\ int)
comment30.text=\r\n\ \ Draws\ a\ Spike\ line\r\n
comment31.params=x1\ y1\ x2\ y2
comment31.target=void\ drawALine3(int,\ int,\ int,\ int)
comment32.params=x1\ y1\ x2\ y2
comment32.target=void\ drawTangledLine(int,\ int,\ int,\ int)
comment32.text=\r\n\ \ Draws\ a\ Tangled\ Line\r\n
comment33.params=x1\ y1\ x2\ y2
comment33.target=void\ drawWavyLine(int,\ int,\ int,\ int)
comment33.text=\r\n\ \ Draws\ a\ Wavy\ Line\r\n
comment34.params=x1\ y1\ x2\ y2
comment34.target=void\ drawALine6(int,\ int,\ int,\ int)
comment35.params=x1\ y1\ x2\ y2
comment35.target=void\ drawRibbonLine(int,\ int,\ int,\ int)
comment35.text=\r\n\ \ Draws\ a\ Ribboned\ Line\r\n
comment36.params=x1\ y1\ x2\ y2
comment36.target=void\ drawGrassLine(int,\ int,\ int,\ int)
comment36.text=\r\n\ \ Draws\ a\ Grass\ Line\r\n
comment37.params=x1\ y1\ x2\ y2
comment37.target=void\ drawSploshedLine(int,\ int,\ int,\ int)
comment37.text=\r\n\ \ Draws\ a\ Sploshed\ Line\r\n
comment38.params=
comment38.target=int\ rand0to2()
comment39.params=x1\ y1\ x2\ y2
comment39.target=void\ drawALine648(int,\ int,\ int,\ int)
comment4.params=alpha
comment4.target=java.awt.AlphaComposite\ makeComposite(float)
comment40.params=x1\ y1\ x2\ y2
comment40.target=void\ drawALine999998(int,\ int,\ int,\ int)
comment41.params=x1\ y1\ x2\ y2
comment41.target=void\ drawALine38(int,\ int,\ int,\ int)
comment42.params=x1\ y1\ x2\ y2
comment42.target=void\ drawALine48(int,\ int,\ int,\ int)
comment43.params=x1\ y1\ x2\ y2
comment43.target=void\ drawALine28(int,\ int,\ int,\ int)
comment44.params=x1\ y1\ x2\ y2
comment44.target=void\ drawALine18(int,\ int,\ int,\ int)
comment45.params=
comment45.target=void\ reset()
comment46.params=isFilled\ x\ y\ w\ h
comment46.target=void\ drawRect(boolean,\ int,\ int,\ int,\ int)
comment46.text=\r\n\ \ Draws\ a\ Rectangle\ from\ x,y\ with\ width\ \=\ w,\ height\ \=\ h\ and\ filled\ if\ isFilled\ \=\ true\r\n
comment47.params=x\ y
comment47.target=void\ reset(int,\ int)
comment48.params=isFilled\ x\ y\ w\ h
comment48.target=void\ drawOval(boolean,\ int,\ int,\ int,\ int)
comment48.text=\r\n\ \ Draws\ a\ Oval\ from\ x,y\ with\ width\ \=\ w,\ height\ \=\ h\ and\ filled\ if\ isFilled\ \=\ true\r\n
comment49.params=c
comment49.target=void\ fill(java.awt.Color)
comment49.text=\r\n\ Fills\ the\ background\ with\ a\ certain\ color\r\n
comment5.params=alpha
comment5.target=void\ drawSquares(float)
comment50.params=a
comment50.target=void\ setGradDir(int)
comment50.text=\r\n\ Set\ the\ direction\ of\ gradient\ background\r\n
comment51.params=c1\ c2
comment51.target=void\ fillGrad(java.awt.Color,\ java.awt.Color)
comment51.text=\r\n\ \ Draws\ a\ gradient\ background\r\n
comment52.params=c
comment52.target=void\ setCyclic(boolean)
comment52.text=\r\n\ \ Sets\ whether\ the\ gradient\ background\ be\ cyclic\r\n
comment53.params=
comment53.target=int\ getWidth()
comment53.text=\r\n\ \ Returns\ width\ of\ drawing\ area\r\n
comment54.params=
comment54.target=int\ getHeight()
comment54.text=\r\n\ \ Returns\ height\ of\ drawing\ area\r\n
comment6.params=
comment6.target=void\ init()
comment6.text=\r\n\ Initializes\ variables\ for\ the\ continuos\ co-ordinate\ system.\r\n\ Normally\ the\ discrete\ cordinate\ system\ is\ used\ for\ the\ drawing\ methods\r\n\ except\ for\ methods\ involving\ rotation\ etc..\r\n
comment7.params=x\ y
comment7.target=void\ moveTo(float,\ float)
comment7.text=\r\n\ Again\ methods\ used\ for\ only\ certain\ methods\ for\ the\ TurtleTool\r\n\ It\ moves\ from\ current\ pos\ to\ new\ pos\ without\ drawing.\r\n
comment8.params=g\ x\ y
comment8.target=void\ lineTo(java.awt.Graphics,\ float,\ float)
comment8.text=\r\n\ Again\ methods\ used\ for\ only\ certain\ methods\ for\ the\ TurtleTool\r\n\ It\ moves\ from\ current\ pos\ to\ new\ pos\ with\ drawing.\r\n
comment9.params=g\ x\ y
comment9.target=void\ drawArrow(java.awt.Graphics,\ float[],\ float[])
numComments=55
